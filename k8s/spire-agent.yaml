---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spire-agent
  namespace: spire
---
# create a cluster role to allow spire-agent to query k8s API server
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: spire-agent-cluster-role
rules:
  - apiGroups: [""]
    resources: ["pods", "nodes", "nodes/proxy"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: spire-agent-cluster-role-binding
subjects:
  - kind: ServiceAccount
    name: spire-agent
    namespace: spire
roleRef:
  kind: ClusterRole
  name: spire-agent-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-agent-config
  namespace: spire
data:
  agent.conf: |
    agent {
      data_dir = "./.data"
      log_level = "DEBUG"
      server_address = "spire-server-service"
      server_port = "8081"
      socket_path ="/tmp/spire-agent/public/api.sock"
      trust_bundle_path = "./conf/agent/root.crt.pem"
      trust_domain = "spire-in-a-box.troydai.cc"
    }

    plugins {
      NodeAttestor "k8s_psat" {
        plugin_data {
          cluster = "kind-cluster"
        }
      }

      KeyManager "memory" {
        plugin_data {
        }
      }

      WorkloadAttestor "k8s" {
        plugin_data {
          # Defaults to the secure kubelet port by default.
          # Minikube does not have a cert in the cluster CA bundle that
          # can authenticate the kubelet cert, so skip validation.
          skip_kubelet_verification = true
        }
      }
    }
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: spire-agent
  namespace: spire
  labels:
    app: spire-agent
spec:
  selector:
    matchLabels:
      app: spire-agent
  template:
    metadata:
      labels:
        app: spire-agent
    spec:
      hostPID: true
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      serviceAccountName: spire-agent
      initContainers:
        - name: init
          image: gcr.io/spiffe-io/wait-for-it
          args: ["-t", "60", "spire-server-service:8081"] # wait for spire-server to be ready
      containers:
        - name: spire-agent
          image: ghcr.io/spiffe/spire-agent:1.6.1
          volumeMounts:
            - name: spire-agent-config
              mountPath: /opt/spire/conf/agent
            - name: spire-agent-socket
              mountPath: /tmp/spire-agent
            - name: spire-agent-data
              mountPath: /opt/spire/.data
            - name: spire-token
              mountPath: /var/run/secrets/tokens
      volumes:
        - name: spire-agent-config
          projected:
            sources:
              - configMap:
                  name: spire-server-root-cert
              - configMap:
                  name: spire-agent-config
        - name: spire-agent-socket
          emptyDir: {}
        - name: spire-agent-data
          emptyDir: {}
        - name: spire-token
          projected:
            sources:
              - serviceAccountToken:
                  path: spire-agent
                  expirationSeconds: 7200
                  audience: spire-server
